Buildroot is a simple, efficient and easy-to-use tool to generate embedded
Linux systems through cross-compilation.

The documentation can be found in docs/manual. You can generate a text
document with 'make manual-text' and read output/docs/manual/manual.text.
Online documentation can be found at http://buildroot.org/docs.html

To build and use the buildroot stuff, do the following:

1) run 'make menuconfig'
2) select the target architecture and the packages you wish to compile
3) run 'make'
4) wait while it compiles
5) find the kernel, bootloader, root filesystem, etc. in output/images

You do not need to be root to build or run buildroot.  Have fun!

Buildroot comes with a basic configuration for a number of boards. Run
'make list-defconfigs' to view the list of provided configurations.

Please feed suggestions, bug reports, insults, and bribes back to the
buildroot mailing list: buildroot@buildroot.org
You can also find us on #buildroot on Freenode IRC.

If you would like to contribute patches, please read
https://buildroot.org/manual.html#submitting-patches



TUTORIAL SISTEMAS EMBARCADOS


A implementação deste tutorial consiste em gerar uma distribuição Linux com integrado a um servidor WEB.
O Servidor WEb foi escrito em Phyton associado a um script escrito em HTML para visualização. 
Para isso foi habilitado através terminal o comando menuconfig ->  Interpreter languages and scripting -> WCHAR 
para adicionar um interpretador para o phyton.

Para construir este tutorial inicialmente foi utilizado os tutoriais 1.1 e 1.2 disponíveis no moodle de autoria do professor.
Estes tutoriais têm o objetivo de construir uma distribuição Linux para emulação com QEMU, baseado no Buildroot.

Na sequencia utilizamos o script disponível no moodle chamado de server.py, conforme abaixo:

import SimpleHTTPServer
import SocketServer
import os.path, sys
import datetime

#Formating string. The %s will be substituted by system data.
html = "<!DOCTYPE html>  \
		<html> \
			<body> \
				<h1>System Information</h1> \
				<p>Local Data: %s</p> \
			</body> \
		</html>"

#Handle de http requests.
class MyRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
	#Build the html file for every connection.
	def makeindex(self):
		tofile = html % datetime.datetime.now().time()
		f = open("index.html", "w")
		f.write(tofile)
		f.close()
		return
	
	#Method http GET.	
	def do_GET(self):
		self.makeindex()
		self.path = '/index.html'
		return SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)

#Start the webserver.
Handler = MyRequestHandler
server = SocketServer.TCPServer(('0.0.0.0', 8080), Handler)
server.serve_forever()



A função é Manipular solicitações de http
e construir o arquivo html para cada conexão. Na sequência a o webserver é inicializado através do socketserver que fara a conexão,
através da porta 8080 do localhost. Para isso basta entrar no browser e inseir localhost 8080



 



